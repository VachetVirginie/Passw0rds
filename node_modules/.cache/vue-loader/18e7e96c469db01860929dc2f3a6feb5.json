{"remainingRequest":"/home/vivi/Dev/netlify-vue-example/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/vivi/Dev/netlify-vue-example/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vivi/Dev/netlify-vue-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vivi/Dev/netlify-vue-example/src/views/Vue.vue?vue&type=template&id=2b80a788&","dependencies":[{"path":"/home/vivi/Dev/netlify-vue-example/src/views/Vue.vue","mtime":1576426831756},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/cache-loader/dist/cjs.js","mtime":1576418241310},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576418241472},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/cache-loader/dist/cjs.js","mtime":1576418241310},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/vue-loader/lib/index.js","mtime":1576418241472}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { attrs: { id: \"app\" } }, [\n    _c(\n      \"section\",\n      { staticClass: \"todo-wrapper\" },\n      [\n        _c(\"h1\", { staticClass: \"todo-title\" }, [\n          _vm._v(_vm._s(_vm.today.day)),\n          _c(\"br\"),\n          _vm._v(_vm._s(_vm.today.date))\n        ]),\n        _c(\n          \"form\",\n          {\n            on: {\n              keydown: function($event) {\n                if (\n                  !$event.type.indexOf(\"key\") &&\n                  _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                ) {\n                  return null\n                }\n                $event.preventDefault()\n              }\n            }\n          },\n          [\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.new_todo,\n                  expression: \"new_todo\"\n                }\n              ],\n              staticClass: \"input-todo\",\n              class: { active: _vm.new_todo },\n              attrs: { type: \"text\", placeholder: \"Title\" },\n              domProps: { value: _vm.new_todo },\n              on: {\n                keyup: function($event) {\n                  if (\n                    !$event.type.indexOf(\"key\") &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  return _vm.addItem($event)\n                },\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.new_todo = $event.target.value\n                }\n              }\n            }),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.new_todo2,\n                  expression: \"new_todo2\"\n                }\n              ],\n              staticClass: \"input-todo\",\n              class: { active: _vm.new_todo },\n              attrs: { type: \"text\", placeholder: \"Take the garbage out\" },\n              domProps: { value: _vm.new_todo2 },\n              on: {\n                keyup: function($event) {\n                  if (\n                    !$event.type.indexOf(\"key\") &&\n                    _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                  ) {\n                    return null\n                  }\n                  return _vm.addItem($event)\n                },\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.new_todo2 = $event.target.value\n                }\n              }\n            }),\n            _c(\n              \"div\",\n              {\n                staticClass: \"btn btn-add\",\n                class: { active: _vm.new_todo },\n                on: { click: _vm.addItem }\n              },\n              [_vm._v(\"+\")]\n            )\n          ]\n        ),\n        _vm.pending.length > 0\n          ? _c(\n              \"div\",\n              [\n                _c(\"p\", { staticClass: \"status busy\" }, [\n                  _vm._v(\n                    \"You have \" + _vm._s(_vm.pending.length) + \" pending item\"\n                  ),\n                  _vm.pending.length > 1 ? _c(\"span\", [_vm._v(\"s\")]) : _vm._e()\n                ]),\n                _c(\n                  \"transition-group\",\n                  {\n                    staticClass: \"todo-list\",\n                    attrs: { name: \"todo-item\", tag: \"ul\" }\n                  },\n                  _vm._l(_vm.pending, function(item, index) {\n                    return _c(\"li\", { key: item.title }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: item.done,\n                            expression: \"item.done\"\n                          }\n                        ],\n                        staticClass: \"todo-checkbox\",\n                        attrs: { id: \"item_\" + item.id, type: \"checkbox\" },\n                        domProps: {\n                          checked: Array.isArray(item.done)\n                            ? _vm._i(item.done, null) > -1\n                            : item.done\n                        },\n                        on: {\n                          change: function($event) {\n                            var $$a = item.done,\n                              $$el = $event.target,\n                              $$c = $$el.checked ? true : false\n                            if (Array.isArray($$a)) {\n                              var $$v = null,\n                                $$i = _vm._i($$a, $$v)\n                              if ($$el.checked) {\n                                $$i < 0 &&\n                                  _vm.$set(item, \"done\", $$a.concat([$$v]))\n                              } else {\n                                $$i > -1 &&\n                                  _vm.$set(\n                                    item,\n                                    \"done\",\n                                    $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                                  )\n                              }\n                            } else {\n                              _vm.$set(item, \"done\", $$c)\n                            }\n                          }\n                        }\n                      }),\n                      _c(\"label\", { attrs: { for: \"item_\" + item.id } }),\n                      _c(\"span\", { staticClass: \"todo-text\" }, [\n                        _vm._v(_vm._s(item.title))\n                      ]),\n                      _c(\"span\", {\n                        staticClass: \"delete\",\n                        on: {\n                          click: function($event) {\n                            return _vm.deleteItem(item)\n                          }\n                        }\n                      })\n                    ])\n                  }),\n                  0\n                )\n              ],\n              1\n            )\n          : _vm._e(),\n        _c(\"transition\", { attrs: { name: \"slide-fade\" } }, [\n          !_vm.pending.length\n            ? _c(\"p\", { staticClass: \"status free\" }, [\n                _c(\"img\", {\n                  attrs: {\n                    src:\n                      \"https://nourabusoud.github.io/vue-todo-list/images/beer_celebration.svg\",\n                    alt: \"celebration\"\n                  }\n                }),\n                _vm._v(\"Time to move!  You have no secure passwords!\")\n              ])\n            : _vm._e()\n        ]),\n        _vm.completed.length > 0 && _vm.showComplete\n          ? _c(\n              \"div\",\n              [\n                _c(\"p\", { staticClass: \"status\" }, [\n                  _vm._v(\"Completed tasks: \" + _vm._s(_vm.completedPercentage))\n                ]),\n                _c(\n                  \"transition-group\",\n                  {\n                    staticClass: \"todo-list archived\",\n                    attrs: { name: \"todo-item\", tag: \"ul\" }\n                  },\n                  _vm._l(_vm.completed, function(item, index) {\n                    return _c(\"li\", { key: item.title }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: item.done,\n                            expression: \"item.done\"\n                          }\n                        ],\n                        staticClass: \"todo-checkbox\",\n                        attrs: { id: \"item_\" + item.id, type: \"checkbox\" },\n                        domProps: {\n                          checked: Array.isArray(item.done)\n                            ? _vm._i(item.done, null) > -1\n                            : item.done\n                        },\n                        on: {\n                          change: function($event) {\n                            var $$a = item.done,\n                              $$el = $event.target,\n                              $$c = $$el.checked ? true : false\n                            if (Array.isArray($$a)) {\n                              var $$v = null,\n                                $$i = _vm._i($$a, $$v)\n                              if ($$el.checked) {\n                                $$i < 0 &&\n                                  _vm.$set(item, \"done\", $$a.concat([$$v]))\n                              } else {\n                                $$i > -1 &&\n                                  _vm.$set(\n                                    item,\n                                    \"done\",\n                                    $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                                  )\n                              }\n                            } else {\n                              _vm.$set(item, \"done\", $$c)\n                            }\n                          }\n                        }\n                      }),\n                      _c(\"label\", { attrs: { for: \"item_\" + item.id } }),\n                      _c(\"span\", { staticClass: \"todo-text\" }, [\n                        _vm._v(_vm._s(item.title))\n                      ]),\n                      _c(\"span\", {\n                        staticClass: \"delete\",\n                        on: {\n                          click: function($event) {\n                            return _vm.deleteItem(item)\n                          }\n                        }\n                      })\n                    ])\n                  }),\n                  0\n                )\n              ],\n              1\n            )\n          : _vm._e(),\n        _c(\"div\", { staticClass: \"control-buttons\" }, [\n          _vm.completed.length > 0\n            ? _c(\n                \"div\",\n                {\n                  staticClass: \"btn btn-secondary\",\n                  on: { click: _vm.toggleShowComplete }\n                },\n                [\n                  !_vm.showComplete\n                    ? _c(\"span\", [_vm._v(\"Show\")])\n                    : _c(\"span\", [_vm._v(\"Hide\")]),\n                  _vm._v(\" Complete\")\n                ]\n              )\n            : _vm._e(),\n          _vm.todoList.length > 0\n            ? _c(\n                \"div\",\n                {\n                  staticClass: \"btn btn-secondary\",\n                  on: { click: _vm.clearAll }\n                },\n                [_vm._v(\"Clear All\")]\n              )\n            : _vm._e()\n        ])\n      ],\n      1\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}