{"remainingRequest":"/home/vivi/Dev/netlify-vue-example/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vivi/Dev/netlify-vue-example/src/components/Slider.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vivi/Dev/netlify-vue-example/src/components/Slider.vue","mtime":1576420942796},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/cache-loader/dist/cjs.js","mtime":1576418241310},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/babel-loader/lib/index.js","mtime":1576418237182},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/cache-loader/dist/cjs.js","mtime":1576418241310},{"path":"/home/vivi/Dev/netlify-vue-example/node_modules/vue-loader/lib/index.js","mtime":1576418241472}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport styles from '@/assets/sass/variables.scss'\nimport utilities from '@/js/utilities'\nexport default {\n  name: 'slider',\n  props: {\n    width: {\n      type: Number,\n      required: false,\n      default: 250\n    },\n    format: {\n      type: String,\n      required: false,\n      default: 'overlay',\n      validator: (value) => ['push', 'full', 'overlay'].indexOf(value) > -1\n    },\n    direction: {\n      type: String,\n      required: false,\n      default: 'left',\n      validator: (value) => ['left', 'right'].indexOf(value) > -1\n    },\n    opacity: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    links: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    }\n  },\n  data () {\n    return {\n      styles: styles,\n      menuWidth: {\n        'width': 0\n      }\n    }\n  },\n  computed: {\n    menuDirection () {\n      return this.direction === 'right'\n        ? { 'right': 0 }\n        : { 'left': 0 }\n    },\n    iconDirection () {\n      return { 'float': this.direction }\n    },\n    app () {\n      return document.getElementById('app')\n    }\n  },\n  mounted () {\n    if (!this.app) {\n      console.warn(`[Slider] The format was set to '${this.format}', but there is no element with an id 'app'. Add id='app' to the element to move.`)\n    }\n  },\n  methods: {\n    openMenu () {\n      const width = `${this.width}px`\n      const marginDirection = `margin-${this.direction}`\n      this.menuWidth = {\n        'width': this.format === 'full' ? '100%' : width\n      }\n      if (this.app && this.format === 'push') {\n        this.app.style[marginDirection] = width\n        this.app.style.transition = `${marginDirection} .5s`\n      }\n      if (this.opacity) {\n        document.body.style.background = utilities.hexToRGB(styles['background-color'], this.opacity)\n      }\n    },\n    closeMenu () {\n      this.menuWidth = { 'width': 0 }\n      if (this.app) {\n        this.app.style.marginLeft = '0'\n        this.app.style.marginRight = '0'\n      }\n      if (this.opacity) {\n        document.body.style.background = styles['background-color']\n      }\n    },\n    toggleMenu () {\n      if (this.menuWidth.width === 0) {\n        this.openMenu()\n      } else {\n        this.closeMenu()\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Slider.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Slider.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <!-- Nav Links -->\n    <nav class=\"navMenu\" :style=\"[menuDirection, menuWidth]\">\n      <a href=\"javscript:void(0)\" class=\"closebtn\" @click.prevent=\"closeMenu\">&times;</a>\n      <template v-if=\"links.length\">\n        <a v-for=\"link in links\" :key=\"link.id\" :href=\"link.url\">{{ link.text }}</a>\n      </template>\n      <slot v-else />\n    </nav>\n    <!-- Hamburger Menu -->\n    <nav class=\"navIcon\" :style=\"iconDirection\">\n      <a href=\"javscript:void(0)\" @click.prevent=\"toggleMenu\" data-test-ref=\"navMenuLink\">\n        <svg width=\"30\" height=\"30\">\n          <path d=\"M0,5 30,5\" :stroke=\"styles['menu-icon-color']\" stroke-width=\"5\"/>\n          <path d=\"M0,14 30,14\" :stroke=\"styles['menu-icon-color']\" stroke-width=\"5\"/>\n          <path d=\"M0,23 30,23\" :stroke=\"styles['menu-icon-color']\" stroke-width=\"5\"/>\n        </svg>\n      </a>\n    </nav>\n  </div>\n</template>\n\n<script>\nimport styles from '@/assets/sass/variables.scss'\nimport utilities from '@/js/utilities'\nexport default {\n  name: 'slider',\n  props: {\n    width: {\n      type: Number,\n      required: false,\n      default: 250\n    },\n    format: {\n      type: String,\n      required: false,\n      default: 'overlay',\n      validator: (value) => ['push', 'full', 'overlay'].indexOf(value) > -1\n    },\n    direction: {\n      type: String,\n      required: false,\n      default: 'left',\n      validator: (value) => ['left', 'right'].indexOf(value) > -1\n    },\n    opacity: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    links: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    }\n  },\n  data () {\n    return {\n      styles: styles,\n      menuWidth: {\n        'width': 0\n      }\n    }\n  },\n  computed: {\n    menuDirection () {\n      return this.direction === 'right'\n        ? { 'right': 0 }\n        : { 'left': 0 }\n    },\n    iconDirection () {\n      return { 'float': this.direction }\n    },\n    app () {\n      return document.getElementById('app')\n    }\n  },\n  mounted () {\n    if (!this.app) {\n      console.warn(`[Slider] The format was set to '${this.format}', but there is no element with an id 'app'. Add id='app' to the element to move.`)\n    }\n  },\n  methods: {\n    openMenu () {\n      const width = `${this.width}px`\n      const marginDirection = `margin-${this.direction}`\n      this.menuWidth = {\n        'width': this.format === 'full' ? '100%' : width\n      }\n      if (this.app && this.format === 'push') {\n        this.app.style[marginDirection] = width\n        this.app.style.transition = `${marginDirection} .5s`\n      }\n      if (this.opacity) {\n        document.body.style.background = utilities.hexToRGB(styles['background-color'], this.opacity)\n      }\n    },\n    closeMenu () {\n      this.menuWidth = { 'width': 0 }\n      if (this.app) {\n        this.app.style.marginLeft = '0'\n        this.app.style.marginRight = '0'\n      }\n      if (this.opacity) {\n        document.body.style.background = styles['background-color']\n      }\n    },\n    toggleMenu () {\n      if (this.menuWidth.width === 0) {\n        this.openMenu()\n      } else {\n        this.closeMenu()\n      }\n    }\n  }\n}\n</script>\n\n"]}]}